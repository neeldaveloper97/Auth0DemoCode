@page "/"
@inject NavigationManager NavigationManager
@inject SimpleLogin.Client.Services.IAlertService AlertService
@inject SimpleLogin.Client.Services.IHttpService HttpService
@inject SimpleLogin.Client.Services.ILocalStorageService LocalStorageService


<div class="card">
    <h4 class="card-header">Login</h4>
    <div class="card-body">
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Username</label>
                <InputText @bind-Value="model.Username" class="form-control" />
                <ValidationMessage For="@(() => model.Username)" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="model.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => model.Password)" />
            </div>
            <button disabled="@loading" class="btn btn-primary">
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>}
                Login
            </button>

        </EditForm>
    </div>
</div>
@code {


    private SimpleLogin.Shared.Login model = new SimpleLogin.Shared.Login();
    private bool loading;



    private async void OnValidSubmit()
    {
        // reset alerts on submit
        AlertService.Clear();

        loading = true;
        try
        {
            //do a get call for API on Auth0.
            var url = NavigationManager.BaseUri;

            var LoginResponse = await HttpService.Post<SimpleLogin.Shared.LoginResponse>(url + "Login", model, false);
            loading = false;
            StateHasChanged();
            if (LoginResponse.Status > 0)
            {
                //set token and other value in local storage
                await LocalStorageService.SetItem("token", LoginResponse.token);
                await LocalStorageService.SetItem("expiresin", LoginResponse.expirein);
                await LocalStorageService.SetItem("email", model.Username);
                NavigationManager.NavigateTo("dashboard");

            }
            else
            {

                AlertService.Error("Wrong username or password.");
            }


        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    } }